# share variables between macros
# can be accessed via {printer["gcode_macro SHARE_VARIABLES"].VARIABLE_NAME}
# can be set with SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=VARIABLE_NAME VALUE=NEW_VALUE
[gcode_macro SHARE_VARIABLES]
variable_enable_save_config : False
variable_dim_enclosure_led : False
variable_enable_adaptive_speed: False
gcode:

[gcode_macro MIN_TEMP_CHECK]
description:Min Temp Check
variable_parameter_MIN_TEMP: 250
gcode: 
    {% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
        {% if printer.extruder.temperature < printer.extruder.target %} # if not reached, heat
            PLAY_LONG_FEEDBACK_SOUND
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={printer.extruder.target|float - 5} MAXIMUM={printer.extruder.target|float + 5}
        {% endif %}
    {% else %} # if no setpoint for extruder, set default value to 250
        PLAY_LONG_FEEDBACK_SOUND
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.MIN_TEMP|default(250)|float}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.MIN_TEMP|default(250)|float - 5} MAXIMUM={params.MIN_TEMP|default(250)|float + 5}
    {% endif %}
    PLAY_DOUBLE_FEEDBACK_SOUND
    
# START_PRINT EXTRUDER_TEMP={material_print_temperature_layer_0} BED_TEMP={material_bed_temperature_layer_0} AREA_START=%MINX%,%MINY% AREA_END=%MAXX%,%MAXY% FILAMENT_TYPE={material_type}
[gcode_macro START_PRINT]
variable_parameter_EXTRUDER_TEMP: 190
variable_parameter_BED_TEMP: 60
; gcode parameters for area bed mesh
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
variable_parameter_FILAMENT_TYPE : "PLA"
gcode:
    ;UPDATE_DELAYED_GCODE ID=POWER_DOWN DURATION=0 ; clear idle_timeout
    CLEAR_PAUSE
    M220 S100 ; reset feedrate
    ; SET_FAN_SPEED FAN=bed_fan SPEED=0.0 ; turn off bed fan 
    
    PRINT MSG="Homing..."
    G28
    ;PRINT MSG="Aligning Z..."
    ;G34 ; level gantry
    
    ; Absolute Positioning
    G90
    ; Set the probe close to the bed to pre-heat it
    G0 X90 Y90 Z20 F3000 

    SET_FAN_SPEED FAN=filter_fan SPEED=0.5 ; filter fan slow mode
    ; SET_FAN_SPEED FAN=bed_fan SPEED=1.0 ; turn on bed fan

    PRINT MSG="Waiting for temperature"

    ; preheat nozzle
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150

    ; set temp and wait for bed
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.BED_TEMP|default(60)|float}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={params.BED_TEMP|default(60)|float - 5} MAXIMUM={params.BED_TEMP|default(60)|float + 5}

    ; then set print nozzle temp and wait
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.EXTRUDER_TEMP|default(200)|float}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.EXTRUDER_TEMP|default(200)|float - 5} MAXIMUM={params.EXTRUDER_TEMP|default(200)|float + 5}

    PLAY_SINGLE_FEEDBACK_SOUND

    ;PRINT MSG="Aligning Z..."
    ;G34 ; level gantry

    PRINT MSG="Homing Z..."
    G28 Z ;re-home Z

    ;SET_GCODE_OFFSET Z=0.525
    ;BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    ;BED_MESH_PROFILE LOAD="default"
    

    ;SET_FILAMENT_PROFILE FILAMENT_TYPE={params.FILAMENT_TYPE|default("DEFAULT")}

    ;UPDATE_DELAYED_GCODE ID=ADAPTIVE_SPEED_WATCHER DURATION=10 ; set adaptive watcher

    ; start print job
    PLAY_DOUBLE_FEEDBACK_SOUND

    PRINT MSG="Prime Line"
    G92 E0 ;Reset Extruder
    G0 X-3 Y180 F3000 ; move outside print area
    G1 Z0.2 F1000 ;Move to start position
    G1 Y95 E9 F1000 ;Draw the first line
    G1 Y85 F3000 ;Move to side a little
    G1 Y0 E21 F1500.0 ;Draw the second line
    G92 E0 ;Reset Extruder
    G1 Z2.0 F1000 ;Move Z Axis up

    ;M221 S93 ; Tunned flow
    PRINT MSG="{printer.print_stats.filename}"

[gcode_macro END_PRINT]
gcode:
    PRINT MSG="Done printing!"
    PLAY_LONG_FEEDBACK_SOUND

   ; UPDATE_DELAYED_GCODE ID=ADAPTIVE_SPEED_WATCHER DURATION=0 ; clear adaptive speed watcher

    G91 ; relative
    G1 E-2 F300
    {% if printer.toolhead.position.z <= 150 %}
        G90
        G0 Z150 F3000
    {% else %}
        G91
        G0 Z5 F3000
    {% endif %}
    G90 ; absolute pos
    G1 X30 Y170 F3000
    TURN_OFF_HEATERS ; heaters off
    ;M84 ; disable steppers
    M107 ; fan off
    BED_MESH_CLEAR
    ;SET_FAN_SPEED FAN=filter_fan SPEED=1.0 ; filter fan max speed
    ; check if saving is needed
    AUTO_SAVE_CONFIG

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_OLD
gcode:
    PRINT MSG="Aborted!"
    PLAY_LONG_FEEDBACK_SOUND

    ;UPDATE_DELAYED_GCODE ID=ADAPTIVE_SPEED_WATCHER DURATION=0 ; clear adaptive speed watcher

    G91 ; relative
    G1 E-2 F300 ; retract
    {% if printer.toolhead.position.z <= 150 %}
        G90
        G0 Z150 F3000
    {% else %}
        G91
        G0 Z5 F3000
    {% endif %}

    G90
    G0 X30 Y170 F3000 ; park toolhead

    CLEAR_PAUSE
    TURN_OFF_HEATERS
    ;M84 ; disable steppers
    M107 ; fan off
    ;BED_MESH_CLEAR
    ;SET_FILAMENT_SENSOR SENSOR=bear_ir ENABLE=1
    CANCEL_PRINT_OLD
    SDCARD_RESET_FILE
    ;SET_FAN_SPEED FAN=filter_fan SPEED=1.0 ; filter fan max speed
    AUTO_SAVE_CONFIG

[gcode_macro RESUME]
rename_existing: RESUME_OLD
gcode:
    G91
    G92 E0 ;Reset Extruder
    G1 E0.5 F300
    G90
    ;SET_FILAMENT_SENSOR SENSOR=bear_ir ENABLE=1
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    PRINT MSG="{printer.print_stats.filename}"
    RESUME_OLD

[gcode_macro PAUSE]
rename_existing: PAUSE_OLD
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    PAUSE_OLD
    G91
    G92 E0 ;Reset Extruder
    G1 E-2 F300
    M125 ; parking
    ;SET_FILAMENT_SENSOR SENSOR=bear_ir ENABLE=0
    PRINT MSG="Paused!"

[gcode_macro PLAY_SINGLE_FEEDBACK_SOUND]
gcode:
    M300 S100 P100
    M300 S1 P100

[gcode_macro PLAY_DOUBLE_FEEDBACK_SOUND]
gcode:
    M300 S100 P100
    M300 S1 P100
    M300 S100 P100
    M300 S1 P100

[gcode_macro PLAY_LONG_FEEDBACK_SOUND]
gcode:
    M300 S100 P1000
    M300 S1 P100

[gcode_macro UPDATE_BED_MESH]
gcode:
    PRINT MSG="Homing..."
    G28
    PRINT MSG="Aligning Z..."
    G34
    PRINT MSG="Probing..."
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    PRINT MSG="Saving..."
    SAVE_CONFIG

# run on startup
[delayed_gcode INIT]
initial_duration: 1
gcode:
    PRINT MSG="Init..."
    ; enable auto power off on startup, idle_timeout does not trigger if the print deos not start
    UPDATE_DELAYED_GCODE ID=POWER_DOWN DURATION=1800
    ; set deault state of enclosure led
    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=dim_enclosure_led VALUE=False
    PRINT MSG="Ready"

# send custom msg
# OUTPUT_TARGET 0 : Both LCD and terminal , 1 : Terminal only , 2 : LCD only
[gcode_macro PRINT]
variable_parameter_MSG : ''
variable_parameter_OUTPUT_TARGET : 0
gcode:
    {% if params.OUTPUT_TARGET|default(0)|int == 0 %}
        M117 {params.MSG | string}
        { action_respond_info((params.MSG) | string)}
    {% elif params.OUTPUT_TARGET|default(0)|int == 1 %}
        { action_respond_info((params.MSG) | string)}
    {% else %}
         M117 {params.MSG | string}
    {% endif %}


[gcode_macro DUMP_VARS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
        {% if (name1 != "configfile") and (name1 != "bed_mesh" and name2!="mesh_matrix") and (name1 != "mcu" and name2!="mcu_constants") and (name1 != "mcu" and name2!="last_stats") and (name2 != "color_data") and (andm1 != "gcode_macro") %}
            { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
        {% else %}
            { action_respond_info("printer['%s'].%s = %s" % (name1, name2, "...")) }
        {% endif %}
      {% endfor %}
   {% endfor %}


[gcode_macro TOGGLE_LED]
gcode:
    ; gcode variable take time to change, so use a tmp variable instead
    {% set flippedState = not(printer["gcode_macro SHARE_VARIABLES"].enable_silent_mode) %}

    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=dim_enclosure_led VALUE={ flippedState }
    {% if flippedState %}
        SET_LED LED=led RED=0.13 GREEN=0.23 BLUE=0.23
    {% else %}
        SET_LED LED=led RED=0.58 GREEN=1 BLUE=1
    {% endif %}
    PRINT MSG="Enclosure LED state changed" OUTPUT_TARGET=1


[gcode_macro CHECK_MESH]
gcode:
    {% set ns = namespace(min_point = printer.bed_mesh.probed_matrix[0][0] ,max_point = printer.bed_mesh.probed_matrix[0][0]) %}

    {% for data_row in printer.bed_mesh.probed_matrix %}
        {% for probe_point in data_row %}
            {% if ns.min_point > probe_point %}
                {% set ns.min_point =  probe_point %}
            {% endif %}
            {% if ns.max_point < probe_point %}
                {% set ns.max_point =  probe_point %}
            {% endif %}
        {% endfor %}
    {% endfor %}

    PRINT MSG={"Mesh delta : " + (ns.max_point - ns.min_point) | string}
    {% if ns.max_point - ns.min_point > params.THRESHOLD|default(0.3)|float %}
        PRINT MSG="Mesh Error!" OUTPUT_TARGET=0
        ;CANCEL_PRINT
    {% else %}
        PRINT MSG="Mesh OK!" OUTPUT_TARGET=0
    {% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 4
; minimum and maximum probe count
variable_min_probe_count : 4
; scale up the probe count, the vlaue should be 1.0 ~ < max/min probe count
variable_probe_count_scale_factor : 1.25
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
		{% set area_min_y = params.AREA_START.split(",")[1]|float %}
		{% set area_max_x = params.AREA_END.split(",")[0]|float %}
		{% set area_max_y = params.AREA_END.split(",")[1]|float %}

        {% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}



        {% set meshMaxPointX = meshPointX %}
	    {% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            PRINT MSG="Set custom mesh area to ({area_min_x},{area_min_y}),({area_max_x},{area_max_y})" OUTPUT_TARGET=1

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x)  * probe_count_scale_factor|float)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
            {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor|float)|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
            {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}
            PRINT MSG="Use mesh algorithm : { algorithm }" OUTPUT_TARGET=1

            PRINT MSG="Set custom mesh matrix to {meshPointX}x{meshPointY}" OUTPUT_TARGET=1
            PRINT MSG="Mesh: {meshPointX}x{meshPointY}" OUTPUT_TARGET=2

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            PRINT MSG="Invalid custom mesh parameters, probe using default setting" OUTPUT_TARGET=1
            PRINT MSG="Mesh: default" OUTPUT_TARGET=2
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        PRINT MSG="Invalid custom mesh parameters, probe using default setting" OUTPUT_TARGET=1
        PRINT MSG="Mesh: default" OUTPUT_TARGET=2
        BED_MESH_CALIBRATE_BASE
    {% endif %}


[gcode_macro DISPLAY_GCODE_PROGRESS]
variable_parameter_TOTAL_LAYER : 0
variable_parameter_CURRENT_LAYER : 0
variable_parameter_PROGRESS : 0
variable_parameter_REMAIN : 0
gcode:
    #PRINT MSG="Layer:{params.CURRENT_LAYER}/{params.TOTAL_LAYER}  Progress:{params.PROGRESS}%  Remain:{params.REMAIN}" OUTPUT_TARGET=1
    PRINT MSG="GCODE_PROGRESS,{params.CURRENT_LAYER}/{params.TOTAL_LAYER},{params.PROGRESS},{params.REMAIN}" OUTPUT_TARGET=2

[gcode_macro SET_FILAMENT_PROFILE]
variable_parameter_FILAMENT_TYPE : "PLA"
variable_parameter_NOZZLE_TEMP : 200 
variable_parameter_BED_TEMP : 60
description: Set current printing filament parameters
gcode:
  {% if params.FILAMENT_TYPE|default("DEFAULT") == "PLA" %}
    PRINT MSG="Set filament profile : PLA" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.05
    SET_GCODE_VARIABLE MACRO=ADAPTIVE_SPEED VARIABLE=chamber_temp_threshold VALUE=40
    SET_GCODE_VARIABLE MACRO=ADAPTIVE_SPEED VARIABLE=reduced_speed_factor VALUE=75
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "PETG" %}
    PRINT MSG="Set filament profile : PETG" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.08
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "ABS" %}
    PRINT MSG="Set filament profile : ABS" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.04
    SET_GCODE_VARIABLE MACRO=ADAPTIVE_SPEED VARIABLE=chamber_temp_threshold VALUE=50
    SET_GCODE_VARIABLE MACRO=ADAPTIVE_SPEED VARIABLE=reduced_speed_factor VALUE=75
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "ASA" %}
    PRINT MSG="Set filament profile : ASA" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.04
    SET_GCODE_VARIABLE MACRO=ADAPTIVE_SPEED VARIABLE=chamber_temp_threshold VALUE=65
    SET_GCODE_VARIABLE MACRO=ADAPTIVE_SPEED VARIABLE=reduced_speed_factor VALUE=75
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "PC" %}
    PRINT MSG="Set filament profile : PC" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.067
    SET_GCODE_VARIABLE MACRO=ADAPTIVE_SPEED VARIABLE=chamber_temp_threshold VALUE=65
    SET_GCODE_VARIABLE MACRO=ADAPTIVE_SPEED VARIABLE=reduced_speed_factor VALUE=75
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "CFPC" %}
    PRINT MSG="Set filament profile : CFPC" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.05
    SET_GCODE_VARIABLE MACRO=ADAPTIVE_SPEED VARIABLE=chamber_temp_threshold VALUE=65
    SET_GCODE_VARIABLE MACRO=ADAPTIVE_SPEED VARIABLE=reduced_speed_factor VALUE=75
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "TEST" %}
    PRINT MSG="Set filament profile : TEST" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.05
    SET_GCODE_VARIABLE MACRO=ADAPTIVE_SPEED VARIABLE=chamber_temp_threshold VALUE=35
    SET_GCODE_VARIABLE MACRO=ADAPTIVE_SPEED VARIABLE=reduced_speed_factor VALUE=75  
  {% else %}
    PRINT MSG="Set filament profile : Default" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.00
    SET_GCODE_VARIABLE MACRO=ADAPTIVE_SPEED VARIABLE=chamber_temp_threshold VALUE=100
    SET_GCODE_VARIABLE MACRO=ADAPTIVE_SPEED VARIABLE=reduced_speed_factor VALUE=100
  {% endif %}

[gcode_macro AUTO_SAVE_CONFIG]
description: Save and restart
gcode:
    {% if printer["gcode_macro SHARE_VARIABLES"].enable_save_config %}
        Z_OFFSET_APPLY_PROBE
        PRINT MSG="Printer will restart and save current configs..." OUTPUT_TARGET=1
        PRINT MSG="Saving..." OUTPUT_TARGET=0
        SAVE_CONFIG
    {% endif %}

[gcode_macro ENABLE_SAVE_CONFIG]
gcode:
    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=enable_save_config VALUE=True

[gcode_macro DISABLE_SAVE_CONFIG]
gcode:
    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=enable_save_config VALUE=False

[gcode_macro DEBUG]
gcode:
    PRINT MSG="{printer["gcode_macro SHARE_VARIABLES"].bool_type}"
    PRINT MSG="{printer["gcode_macro SHARE_VARIABLES"].int_type}"
    PRINT MSG="{printer["gcode_macro SHARE_VARIABLES"].float_type}"
    PRINT MSG="{printer["gcode_macro SHARE_VARIABLES"].string_type}"



[delayed_gcode POWER_DOWN]
initial_duration: 0.
gcode:
    {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
        {% if printer.extruder.temperature < 50 %}
            M84 ; disable steppers
            TURN_OFF_HEATERS
            M107 ; turn off fans
            SET_FAN_SPEED FAN=filter_fan SPEED=0.0 ; turn off filter fan
            ;SET_FAN_SPEED FAN=bed_fan SPEED=0.0 ; turn off filter fan
            {action_call_remote_method("set_device_power", device="PSU", state="off")} ; use sonoff to power down
        {% else %}
            TURN_OFF_HEATERS
            M107 ; turn off fans
            SET_FAN_SPEED FAN=filter_fan SPEED=0.0 ; turn off filter fan
            ;SET_FAN_SPEED FAN=bed_fan SPEED=0.0 ; turn off filter fan
            UPDATE_DELAYED_GCODE ID=POWER_DOWN DURATION=300 ; extruder still too hot, wait extra 5 mins 
        {% endif %}
    {% endif %}

[delayed_gcode ADAPTIVE_SPEED_WATCHER]
initial_duration: 0.
gcode:
    {% if printer["gcode_macro SHARE_VARIABLES"].enable_adaptive_speed %}
        ADAPTIVE_SPEED ; call adaptive speed
    {% else %}
    {% endif %}
    UPDATE_DELAYED_GCODE ID=ADAPTIVE_SPEED_WATCHER DURATION=10 ; set next run

[gcode_macro ADAPTIVE_SPEED]
variable_filament_type : "none"
variable_chamber_temp_threshold : 0
variable_reduced_speed_factor : 75
gcode:
    {% if printer["gcode_macro ADAPTIVE_SPEED"].filament_type != "none" %}
        {% if printer['temperature_sensor chamber'].temperature > printer["gcode_macro ADAPTIVE_SPEED"].chamber_temp_threshold %}
            ; chamber temp too high, reduce speed
            {% if printer["gcode_move"].speed_factor != printer["gcode_macro ADAPTIVE_SPEED"].reduced_speed_factor %}
                ; PRINT MSG="Adaptive speed : Reduce printing speed" OUTPUT_TARGET=1
                M220 S{printer["gcode_macro ADAPTIVE_SPEED"].reduced_speed_factor|int }
            {% endif %}
        {% else %}  
            ; restore speed
            {% if printer["gcode_move"].speed_factor != 100 %}
                ; PRINT MSG="Adaptive speed : Restore printing speed" OUTPUT_TARGET=1
                M220 S100
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro ENABLE_ADAPTIVE_SPEED]
description: Enable adaptive speed
gcode:
    PRINT MSG="Adaptive speed : Enabled" OUTPUT_TARGET=1
    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=enable_adaptive_speed VALUE=True

[gcode_macro DISABLE_ADAPTIVE_SPEED]
description: Disable adaptive speed
gcode:
    PRINT MSG="Adaptive speed : Disabled" OUTPUT_TARGET=1
    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=enable_adaptive_speed VALUE=False
    ; restore speed
    {% if printer.gcode_move.speed_factor != 100 %}
        M220 S100
    {% endif %}

[gcode_macro TOGGLE_ADAPTIVE_SPEED]
description: Toggle adaptive speed
gcode:
    ; gcode variable take time to change, so use a tmp variable instead
    {% set flippedState = not(printer["gcode_macro SHARE_VARIABLES"].enable_adaptive_speed) %}
    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=enable_adaptive_speed VALUE={ flippedState }
    {% if flippedState %}
        ENABLE_ADAPTIVE_SPEED
    {% else %}
        DISABLE_ADAPTIVE_SPEED
    {% endif %}

[gcode_macro FORCE_MOVE_BED]
variable_parameter_DISTANCE: -10
gcode:
    SET_KINEMATIC_POSITION Z=100 ; fake position
    G91 ; Relative positioning
    G0 Z{params.DISTANCE|default(-10)|float}
    G90 ; Absolute positioning
    # M84 ; disable steppers, this will clear current position


[gcode_macro TEST_MACRO]
gcode:
    PRINT MSG={printer.toolhead.position.x}
    {% set t0_pos = printer.toolhead.position.x %}
    M117 {t0_pos}