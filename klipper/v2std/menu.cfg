# # This file defines the default layout of the printer's menu.

# # It is not necessary to edit this file to change the menu. Instead,
# # one may override any of the sections defined here by defining a
# # section with the same name in the main printer.cfg config file.

# ### DEFAULT MENU ###
# # Main
# #   + Tune
# #       + Speed: 000%
# #       + Flow: 000%
# #       + Offset Z:00.00
# #   + SD Card
# #       + Start
# #       + Resume
# #       + Pause
# #       + Abort
# #       + ... (files)
# #   + Control
# #       + Home All
# #       + Home Z
# #       + Home X/Y
# #       + Move
# #          + Move 10mm
# #               + Move X:000.0
# #               + Move Y:000.0
# #               + Move Z:000.0
# #               + Move E:+000.0
# #          + Move 1mm
# #               + Move X:000.0
# #               + Move Y:000.0
# #               + Move Z:000.0
# #               + Move E:+000.0
# #          + Move 0.1mm
# #               + Move X:000.0
# #               + Move Y:000.0
# #               + Move Z:000.0
# #               + Move E:+000.0
# #       + Steppers off
# #       + Fan: OFF
# #       + Fan speed: 000%
# #   + Temperature
# #       + Cooldown
# #           + Cooldown all
# #           + Cooldown hotend
# #           + Cooldown hotbed
# #       + Ex0:000 (0000)
# #       + Ex1:000 (0000)
# #       + Bed:000 (0000)
# #       + Preheat PLA
# #           + Preheat all
# #           + Preheat hotend
# #           + Preheat hotbed
# #       + Preheat PETG
# #           + Preheat all
# #           + Preheat hotend
# #           + Preheat hotbed
# #       + Preheat ABS
# #           + Preheat all
# #           + Preheat hotend
# #           + Preheat hotbed
# #   + Filament
# #       + Preheat 000/000
# #       + Load Fil.
# #       + Unload Fil.
# #       + Extrude
# #       + Retract
# #       + Feed: 000.0
# #       + Ex0:000 (0000)
# #       + Cooldown
# #   + Setup
# #       + Auto align Z
# #       + Bed mesh
# #       + Probe calibrate
# #           + Start calibrate
# #           + Adjust Z ++
# #           + Accept
# #           + Abort
# #       + Probe acc. test
# #       + PID tunning
# #           + Tune Hotend PID
# #           + Tune Hotbed PID
# #       + Save config
# #       + Dump parameters
# #       + Restart
# #           + Restart host
# #           + Restart FW

# ### menu main ###
# [menu __menutree]
# type: list
# name: Main

# ### menu tune ###
# [menu __menutree __tune]
# type: list
# enable: {printer.idle_timeout.state == "Printing"}
# name: Tune

# [menu __menutree __tune __speed]
# type: input
# name: Speed: {'%3d' % (menu.input*100)}%
# input: {printer.gcode_move.speed_factor}
# input_min: 0
# input_max: 5
# input_step: 0.05
# realtime: True
# gcode:
#     M220 S{'%d' % (menu.input*100)}

# [menu __menutree __tune __flow]
# type: input
# name: Flow: {'%3d' % (menu.input*100)}%
# input: {printer.gcode_move.extrude_factor}
# input_min: 0
# input_max: 2
# input_step: 0.01
# realtime: True
# gcode:
#     M221 S{'%d' % (menu.input*100)}

# [menu __menutree __tune __offsetz]
# type: input
# name: Offset Z:{'%05.3f' % menu.input}
# input: {printer.gcode_move.homing_origin.z}
# input_min: -5
# input_max: 5
# input_step: 0.005
# realtime: True
# gcode:
#     SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

# ### menu virtual sdcard ###
# [menu __menutree __sdcard]
# type: vsdlist
# enable: {('virtual_sdcard' in printer)}
# name: SD Card

# [menu __menutree __sdcard __start]
# type: command
# enable: {('virtual_sdcard' in printer) and (printer.print_stats.state == "standby" or printer.print_stats.state == "error" or printer.print_stats.state == "complete")}
# name: Start
# gcode:
#     { menu.exit(True) }
#     PLAY_SINGLE_FEEDBACK_SOUND
#     M24

# [menu __menutree __sdcard __resume]
# type: command
# enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "paused"}
# name: Resume
# gcode:
#     { menu.exit(True) }
#     PLAY_SINGLE_FEEDBACK_SOUND
#     RESUME

# [menu __menutree __sdcard __pause]
# type: command
# enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "printing"}
# name: Pause
# gcode:
#     PLAY_SINGLE_FEEDBACK_SOUND
#     { menu.exit(True) }
#     PAUSE

# [menu __menutree __sdcard __abort]
# type: command
# enable: {('virtual_sdcard' in printer) and (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
# name: Abort
# gcode:
#     { menu.exit(True) }
#     CLEAR_PAUSE
#     CANCEL_PRINT
#     SDCARD_RESET_FILE

# ### menu control ###
# [menu __menutree __motion]
# type: list
# name: Motion

# [menu __menutree __motion __home]
# type: list
# name: Home

# [menu __menutree __motion __home __homeall]
# type: command
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Home All
# gcode:
#     PRINT MSG="Homing..."
#     G28
#     PRINT MSG="Ready"


# [menu __menutree __motion __home __homexy]
# type: command
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Home X/Y
# gcode:
#     PRINT MSG="XY Homing..."
#     G28 X Y
#     PRINT MSG="Ready"

# [menu __menutree __motion __home __homez]
# type: command
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Home Z
# gcode:
#     PRINT MSG="Z Homing..."
#     G28 Z
#     PRINT MSG="Ready"


# [menu __menutree __motion __move]
# type: list
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Move


# ### menu move 10mm ###
# [menu __menutree __motion __move __move_10mm]
# type: list
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Move 10mm

# [menu __menutree __motion __move __move_10mm __axis_x]
# type: input
# name: Move X:{'%05.1f' % menu.input}
# input: {printer.gcode_move.gcode_position.x}
# input_min: {printer.toolhead.axis_minimum.x}
# input_max: {printer.toolhead.axis_maximum.x}
# input_step: 10.0
# gcode:
#     SAVE_GCODE_STATE NAME=__move__axis
#     G90
#     G1 X{menu.input}
#     RESTORE_GCODE_STATE NAME=__move__axis

# [menu __menutree __motion __move __move_10mm __axis_y]
# type: input
# name: Move Y:{'%05.1f' % menu.input}
# input: {printer.gcode_move.gcode_position.y}
# input_min: {printer.toolhead.axis_minimum.y}
# input_max: {printer.toolhead.axis_maximum.y}
# input_step: 10.0
# gcode:
#     SAVE_GCODE_STATE NAME=__move__axis
#     G90
#     G1 Y{menu.input}
#     RESTORE_GCODE_STATE NAME=__move__axis

# [menu __menutree __motion __move __move_10mm __axis_z]
# type: input
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Move Z:{'%05.1f' % menu.input}
# input: {printer.gcode_move.gcode_position.z}
# input_min: {printer.toolhead.axis_minimum.z}
# input_max: {printer.toolhead.axis_maximum.z}
# input_step: 10.0
# gcode:
#     SAVE_GCODE_STATE NAME=__move__axis
#     G90
#     G1 Z{menu.input}
#     RESTORE_GCODE_STATE NAME=__move__axis

# [menu __menutree __motion __move __move_10mm __axis_e]
# type: input
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Move E:{'%+06.1f' % menu.input}
# input: 0
# input_min: -50
# input_max: 200
# input_step: 10.0
# gcode:
#     SAVE_GCODE_STATE NAME=__move__axis
#     M83
#     G1 E{menu.input} F240
#     RESTORE_GCODE_STATE NAME=__move__axis





# ### menu move 1mm ###
# [menu __menutree __motion __move __move_1mm]
# type: list
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Move 1mm

# [menu __menutree __motion __move __move_1mm __axis_x]
# type: input
# name: Move X:{'%05.1f' % menu.input}
# input: {printer.gcode_move.gcode_position.x}
# input_min: {printer.toolhead.axis_minimum.x}
# input_max: {printer.toolhead.axis_maximum.x}
# input_step: 1.0
# gcode:
#     SAVE_GCODE_STATE NAME=__move__axis
#     G90
#     G1 X{menu.input}
#     RESTORE_GCODE_STATE NAME=__move__axis

# [menu __menutree __motion __move __move_1mm __axis_y]
# type: input
# name: Move Y:{'%05.1f' % menu.input}
# input: {printer.gcode_move.gcode_position.y}
# input_min: {printer.toolhead.axis_minimum.y}
# input_max: {printer.toolhead.axis_maximum.y}
# input_step: 1.0
# gcode:
#     SAVE_GCODE_STATE NAME=__move__axis
#     G90
#     G1 Y{menu.input}
#     RESTORE_GCODE_STATE NAME=__move__axis

# [menu __menutree __motion __move __move_1mm __axis_z]
# type: input
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Move Z:{'%05.1f' % menu.input}
# input: {printer.gcode_move.gcode_position.z}
# input_min: {printer.toolhead.axis_minimum.z}
# input_max: {printer.toolhead.axis_maximum.z}
# input_step: 1.0
# gcode:
#     SAVE_GCODE_STATE NAME=__move__axis
#     G90
#     G1 Z{menu.input}
#     RESTORE_GCODE_STATE NAME=__move__axis

# [menu __menutree __motion __move __move_1mm __axis_e]
# type: input
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Move E:{'%+06.1f' % menu.input}
# input: 0
# input_min: -50
# input_max: 200
# input_step: 1.0
# gcode:
#     SAVE_GCODE_STATE NAME=__move__axis
#     M83
#     G1 E{menu.input} F240
#     RESTORE_GCODE_STATE NAME=__move__axis

# ### menu move 0.1mm ###
# [menu __menutree __motion __move __move_01mm]
# type: list
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Move 0.1mm

# [menu __menutree __motion __move __move_01mm __axis_x]
# type: input
# name: Move X:{'%05.1f' % menu.input}
# input: {printer.gcode_move.gcode_position.x}
# input_min: {printer.toolhead.axis_minimum.x}
# input_max: {printer.toolhead.axis_maximum.x}
# input_step: 0.1
# gcode:
#     SAVE_GCODE_STATE NAME=__move__axis
#     G90
#     G1 X{menu.input}
#     RESTORE_GCODE_STATE NAME=__move__axis

# [menu __menutree __motion __move __move_01mm __axis_y]
# type: input
# name: Move Y:{'%05.1f' % menu.input}
# input: {printer.gcode_move.gcode_position.y}
# input_min: {printer.toolhead.axis_minimum.y}
# input_max: {printer.toolhead.axis_maximum.y}
# input_step: 0.1
# gcode:
#     SAVE_GCODE_STATE NAME=__move__axis
#     G90
#     G1 Y{menu.input}
#     RESTORE_GCODE_STATE NAME=__move__axis

# [menu __menutree __motion __move __move_01mm __axis_z]
# type: input
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Move Z:{'%05.1f' % menu.input}
# input: {printer.gcode_move.gcode_position.z}
# input_min: {printer.toolhead.axis_minimum.z}
# input_max: {printer.toolhead.axis_maximum.z}
# input_step: 0.1
# gcode:
#     SAVE_GCODE_STATE NAME=__move__axis
#     G90
#     G1 Z{menu.input}
#     RESTORE_GCODE_STATE NAME=__move__axis

# [menu __menutree __motion __move __move_01mm __axis_e]
# type: input
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Move E:{'%+06.1f' % menu.input}
# input: 0
# input_min: -50
# input_max: 200
# input_step: 0.1
# gcode:
#     SAVE_GCODE_STATE NAME=__move__axis
#     M83
#     G1 E{menu.input} F240
#     RESTORE_GCODE_STATE NAME=__move__axis

# [menu __menutree __motion __disable]
# type: command
# name: Steppers off
# gcode:
#     M84
#     M18

# [menu __menutree __cooling]
# type: list
# name: Cooling

# [menu __menutree __cooling __fanonoff]
# type: input
# enable: {'fan' in printer}
# name: Fan: {'ON ' if menu.input else 'OFF'}
# input: {printer.fan.speed}
# input_min: 0
# input_max: 1
# input_step: 1
# gcode:
#     M106 S{255 if menu.input else 0}

# [menu __menutree __cooling __fanspeed]
# type: input
# enable: {'fan' in printer}
# name: Fan speed: {'%3d' % (menu.input*100)}%
# input: {printer.fan.speed}
# input_min: 0
# input_max: 1
# input_step: 0.05
# gcode:
#     M106 S{'%d' % (menu.input*255)}

# ### menu temperature ###
# [menu __menutree __temp]
# type: list
# name: Temperature

# [menu __menutree __temp __cooldown]
# type: list
# name: Cooldown

# [menu __menutree __temp __cooldown __all]
# type: command
# enable: {('extruder' in printer) and ('heater_bed' in printer)}
# name: Cooldown all
# gcode:
#     PLAY_SINGLE_FEEDBACK_SOUND
#     M104 S0
#     M140 S0

# [menu __menutree __temp __cooldown __hotend]
# type: command
# enable: {'extruder' in printer}
# name: Cooldown hotend
# gcode:
#     PLAY_SINGLE_FEEDBACK_SOUND
#     M104 S0

# [menu __menutree __temp __cooldown __hotbed]
# type: command
# enable: {'heater_bed' in printer}
# name: Cooldown hotbed
# gcode:
#     PLAY_SINGLE_FEEDBACK_SOUND
#     M140 S0

# [menu __menutree __temp __hotend0_target]
# type: input
# enable: {'extruder' in printer}
# name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
# input: {printer.extruder.target}
# input_min: 0
# input_max: {printer.configfile.config.extruder.max_temp}
# input_step: 5
# gcode: M104 T0 S{'%.0f' % menu.input}

# [menu __menutree __temp __hotend1_target]
# type: input
# enable: {'extruder1' in printer}
# name: {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
# input: {printer.extruder1.target}
# input_min: 0
# input_max: {printer.configfile.config.extruder1.max_temp}
# input_step: 5
# gcode: M104 T1 S{'%.0f' % menu.input}

# [menu __menutree __temp __hotbed_target]
# type: input
# enable: {'heater_bed' in printer}
# name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
# input: {printer.heater_bed.target}
# input_min: 0
# input_max: {printer.configfile.config.heater_bed.max_temp}
# input_step: 1
# gcode: M140 S{'%.0f' % menu.input}

# [menu __menutree __temp __preheat_pla]
# type: list
# name: Preheat PLA

# [menu __menutree __temp __preheat_pla __all]
# type: command
# enable: {('extruder' in printer) and ('heater_bed' in printer)}
# name: Preheat all
# gcode:
#     M140 S60
#     M104 S200

# [menu __menutree __temp __preheat_pla __hotend]
# type: command
# enable: {'extruder' in printer}
# name: Preheat hotend
# gcode: M104 S200

# [menu __menutree __temp __preheat_pla __hotbed]
# type: command
# enable: {'heater_bed' in printer}
# name: Preheat hotbed
# gcode: M140 S60


# [menu __menutree __temp __preheat_petg]
# type: list
# name: Preheat PETG

# [menu __menutree __temp __preheat_petg __all]
# type: command
# enable: {('extruder' in printer) and ('heater_bed' in printer)}
# name: Preheat all
# gcode:
#     M140 S85
#     M104 S240

# [menu __menutree __temp __preheat_petg __hotend]
# type: command
# enable: {'extruder' in printer}
# name: Preheat hotend
# gcode: M104 S240

# [menu __menutree __temp __preheat_petg __hotbed]
# type: command
# enable: {'heater_bed' in printer}
# name: Preheat hotbed
# gcode: M140 S85

# [menu __menutree __temp __preheat_abs]
# type: list
# name: Preheat ABS

# [menu __menutree __temp __preheat_abs __all]
# type: command
# enable: {('extruder' in printer) and ('heater_bed' in printer)}
# name: Preheat all
# gcode:
#     M140 S110
#     M104 S240

# [menu __menutree __temp __preheat_abs __hotend]
# type: command
# enable: {'extruder' in printer}
# name: Preheat hotend
# gcode: M104 S245

# [menu __menutree __temp __preheat_abs __hotbed]
# type: command
# enable: {'heater_bed' in printer}
# name: Preheat hotbed
# gcode: M140 S110

# ### menu filament ###

# [menu __menutree __filament]
# type: list
# name: Filament

# [menu __menutree __filament __preheat]
# type: command
# enable: {'extruder' in printer}
# name: {"Preheat %3.0f/%3.0f" % (printer.extruder.temperature,printer.extruder.target)}
# gcode:
#     PLAY_SINGLE_FEEDBACK_SOUND
#     M104 T0 S200

# [menu __menutree __filament __loadf]
# type: command
# name: Load Fil.
# gcode:
#     M701

# [menu __menutree __filament __unloadf]
# type: command
# name: Unload Fil.
# gcode:
#     M702


# [menu __menutree __filament __extrude]
# type: command
# name: Extrude
# gcode:
#     SAVE_GCODE_STATE NAME=__filament__extrude
#     M83
#     G1 E50 F250
#     RESTORE_GCODE_STATE NAME=__filament__extrude

# [menu __menutree __filament __retract]
# type: command
# name: Retract
# gcode:
#     SAVE_GCODE_STATE NAME=__filament__unload
#     M83
#     G1 E-50 F500
#     RESTORE_GCODE_STATE NAME=__filament__unload


# [menu __menutree __filament __feed]
# type: input
# name: Feed: {'%.1f' % menu.input}
# input: 5
# input_step: 0.1
# gcode:
#     SAVE_GCODE_STATE NAME=__filament__feed
#     M83
#     G1 E{'%.1f' % menu.input} F60
#     RESTORE_GCODE_STATE NAME=__filament__feed

# [menu __menutree __filament __hotend0_target]
# type: input
# enable: {'extruder' in printer}
# name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
# input: {printer.extruder.target}
# input_min: 0
# input_max: {printer.configfile.config.extruder.max_temp}
# input_step: 5
# gcode: M104 T0 S{'%.0f' % menu.input}

# [menu __menutree __filament __cooldown]
# type: command
# enable: {'extruder' in printer}
# name: Cooldown
# gcode:
#     PLAY_SINGLE_FEEDBACK_SOUND
#     M104 S0

# ### menu setup ###
# [menu __menutree __setup]
# type: list
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Setup

# [menu __menutree __setup __z_align]
# type: command
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Auto align z
# gcode:
#     { menu.exit(True) }
#     PRINT MSG="Homing..."
#     G28
#     G34

# [menu __menutree __setup __bed_mesh]
# type: command
# name: Update bed mesh
# gcode:
#     { menu.exit(True) }
#     PRINT MSG="Homing..."
#     G28
#     PRINT MSG="Aligning Z..."
#     G34
#     PRINT MSG="Probing..."
#     BED_MESH_CLEAR
#     BED_MESH_CALIBRATE
#     PRINT MSG="Ready"


# [menu __menutree __setup __probe_calib]
# type: list
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Probe offset

# [menu __menutree __setup __probe_calib __start]
# type: command
# name: Start calibr.
# gcode:
#     G28
#     PROBE_CALIBRATE

# [menu __menutree __setup __probe_calib __adjust]
# type: list
# name: Adjust Z

# [menu __menutree __setup __probe_calib __adjust __p1000]
# type: command
# name: +1.0
# gcode: TESTZ Z=+1

# [menu __menutree __setup __probe_calib __adjust __p100]
# type: command
# name: +0.1
# gcode: TESTZ Z=+0.1

# [menu __menutree __setup __probe_calib __adjust __p50]
# type: command
# name: +0.05
# gcode: TESTZ Z=+0.05

# [menu __menutree __setup __probe_calib __adjust __m1000]
# type: command
# name: -1.0
# gcode: TESTZ Z=-1

# [menu __menutree __setup __probe_calib __adjust __m100]
# type: command
# name: -0.1
# gcode: TESTZ Z=-0.1

# [menu __menutree __setup __probe_calib __adjust __50]
# type: command
# name: -0.05
# gcode: TESTZ Z=-0.05


# [menu __menutree __setup __probe_calib __accept]
# type: command
# name: Accept
# gcode:
#     PLAY_SINGLE_FEEDBACK_SOUND
#     ACCEPT
#     PRINT MSG="Ready"

# [menu __menutree __setup __probe_calib __abort]
# type: command
# name: Abort
# gcode:
#     PLAY_SINGLE_FEEDBACK_SOUND
#     ABORT
#     PRINT MSG="Ready"


# [menu __menutree __setup __probe_]
# type: command
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Probe acc. test
# gcode:
#     { menu.exit(True) }
#     PRINT MSG="Homing..."
#     G28
#     PRINT MSG="Probing..."
#     PROBE_ACCURACY
#     PRINT MSG="Ready"

# [menu __menutree __setup __tunning]
# type: list
# name: PID tunning

# [menu __menutree __setup __tunning __hotend_pid_tunning]
# type: command
# enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
# name: Tune Hotend PID
# gcode:
#     PLAY_SINGLE_FEEDBACK_SOUND
#     PRINT MSG="Tunning pid..."
#     PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1
#     PLAY_SINGLE_FEEDBACK_SOUND
#     PRINT MSG="Ready"

# [menu __menutree __setup __tunning __hotbed_pid_tunning]
# type: command
# enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
# name: Tune Hotbed PID
# gcode:
#     PLAY_SINGLE_FEEDBACK_SOUND
#     PRINT MSG="Tunning pid..."
#     PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1
#     PLAY_SINGLE_FEEDBACK_SOUND
#     PRINT MSG="Ready"

# [menu __menutree __setup __save_config]
# type: command
# name: Save config
# gcode:
#     PLAY_SINGLE_FEEDBACK_SOUND
#     { menu.exit(True) }
#     PRINT MSG="Saving..."
#     SAVE_CONFIG

# [menu __menutree __setup __dump]
# type: command
# name: Dump parameters
# gcode:
#    {% for name1 in printer %}
#       {% for name2 in printer[name1] %}
#          { action_respond_info("printer['%s'].%s = %s"
#                                % (name1, name2, printer[name1][name2])) }
#       {% else %}
#          { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
#       {% endfor %}
#    {% endfor %}

# [menu __menutree __setup __restart]
# type: list
# name: Restart

# [menu __menutree __setup __restart __host_restart]
# type: command
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Restart host
# gcode:
#     PLAY_SINGLE_FEEDBACK_SOUND
#     RESTART

# [menu __menutree __setup __restart __firmware_restart]
# type: command
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Restart FW
# gcode:
#     PLAY_SINGLE_FEEDBACK_SOUND
#     FIRMWARE_RESTART

# [menu __menutree __debug]
# type: list
# enable: False
# name : Debug

# [menu __menutree __debug __opt1]
# type: command
# enable: True
# name: test1
# gcode:
#     { menu.exit(True) }
#     PRINT MSG="{printer.print_stats.filename}"

# [menu __menutree __debug __opt2]
# type: command
# enable: True
# name: test2
# gcode:
#     { menu.exit(True) }
#     PRINT MSG="{printer.print_stats.state}"