# This file defines the default layout of the printer's menu.

# It is not necessary to edit this file to change the menu. Instead,
# one may override any of the sections defined here by defining a
# section with the same name in the main printer.cfg config file.

### DEFAULT MENU ###
# Main
#   + Tune
#       + Z offset
#          + Offset Z:00.00
#          + Save offset
#       + Adt.Speed : ON/OFF
#       + Speed: 000%
#       + Flow: 000%
#   + Resume
#   + Pause
#   + Abort
#       + YES
#       + NO
#   + Files
#       + Start
#       + ... (files)
#   + Motion
#       + Home
#           + Home All
#           + Home X/Y
#           + Home Z
#       + Move
#          + Move X:000.0
#          + Move Y:000.0
#          + Move Z:000.0
#          + Move E:+000.0
#          + Bed Up   10mm
#          + Bed Down 10mm
#       + Align Z
#       + Steppers off
#       + Align Z
#       + Disable steppers
#   + Filament
#       + Ex0:000 (0000)
#       + Load Fil.
#       + Unload Fil.
#       + Feed: 000.0
#       + Cooldown
#   + Cooling
#       + Layer fan
#       + Bed fan
#       + Filter fan
#   + Temperature
#       + Cooldown
#           + Cooldown all
#           + Cooldown hotend
#           + Cooldown hotbed
#       + Ex0:000 (0000)
#       + Ex1:000 (0000)
#       + Bed:000 (0000)
#       + Heat soak
#   + Setup
#       + Align Z
#       + Bed mesh
#       + Probe calibrate
#           + Start calibrate
#           + Adjust Z
#               + +1.0
#               + +0.1
#               + +0.05
#               + -1.0
#               + -0.1
#               + -0.05
#           + Accept
#           + Abort
#           + Save
#       + Probe acc. test
#       + PID tunning
#           + Tune Hotend PID
#           + Tune Hotbed PID
#       + Save(restart)
#       + Save(pending)
#       + Dump parameters
#       + Restart
#           + Restart host
#           + Restart FW
#   + System
#       + Reboot
#       + Shutdown

### menu main ###
[menu __menutree]
type: list
name: Main

### menu tune ###
[menu __menutree __tune]
type: list
enable: {printer.idle_timeout.state == "Printing"}
name: Tune

[menu __menutree __tune __zoffset]
type: list
enable: {printer.idle_timeout.state == "Printing"}
name: Z offset

[menu __menutree __tune __zoffset __adjust]
type: input
name: Offset Z:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __menutree __tune __zoffset __savelater]
type: command
name: Save offset
gcode:
    PLAY_SINGLE_FEEDBACK_SOUND
    ENABLE_SAVE_CONFIG

[menu __menutree __tune __speed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0
input_max: 5
input_step: 0.05
realtime: True
gcode:
    M220 S{'%d' % (menu.input*100)}

[menu __menutree __tune __flow]
type: input
name: Flow: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}

[menu __menutree __resume]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "paused"}
name: ~play~Resume
gcode:
    { menu.exit(True) }
    RESUME

[menu __menutree __pause]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "printing"}
name: ~pause~Pause
gcode:
    { menu.exit(True) }
    PAUSE

[menu __menutree __abort]
type: list
enable: {('virtual_sdcard' in printer) and (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: ~stop~Abort

[menu __menutree __abort __text]
type: command
enable: {('virtual_sdcard' in printer) and (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Abort print?


[menu __menutree __abort __exec]
type: command
enable: {('virtual_sdcard' in printer) and (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: YES
gcode:
    { menu.exit(True) }
    CLEAR_PAUSE
    CANCEL_PRINT
    SDCARD_RESET_FILE

[menu __menutree __abort __cancel]
type: command
enable: {('virtual_sdcard' in printer) and (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: NO
gcode:
    { menu.exit(True) }

### menu virtual sdcard ###
[menu __menutree __sdcard]
type: vsdlist
enable: {('virtual_sdcard' in printer)}
name: Files

[menu __menutree __sdcard __start]
type: command
enable: {('virtual_sdcard' in printer) and (printer.print_stats.state == "standby" or printer.print_stats.state == "error" or printer.print_stats.state == "complete")}
name: ~play~Start
gcode:
    { menu.exit(True) }
    PLAY_SINGLE_FEEDBACK_SOUND
    M24

### menu control ###
[menu __menutree __motion]
type: list
name: Motion

[menu __menutree __motion __home]
type: list
name: Home

[menu __menutree __motion __home __homeall]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home All
gcode:
    PRINT MSG="Homing..."
    G28
    PRINT MSG="Ready"


[menu __menutree __motion __home __homexy]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home X/Y
gcode:
    PRINT MSG="XY Homing..."
    G28 X Y
    PRINT MSG="Ready"

[menu __menutree __motion __home __homez]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home Z
gcode:
    PRINT MSG="Z Homing..."
    G28 Z
    PRINT MSG="Ready"

[menu __menutree __motion __move]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move


[menu __menutree __motion __move __axis_x]
type: input
enable: { not printer.idle_timeout.state == "Printing" and "xyz" in printer['toolhead'].homed_axes}
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __menutree __motion __move __axis_y]
type: input
enable: { not printer.idle_timeout.state == "Printing" and "xyz" in printer['toolhead'].homed_axes}
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __menutree __motion __move __axis_z]
type: input
enable: { not printer.idle_timeout.state == "Printing" and "xyz" in printer['toolhead'].homed_axes}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: {printer.toolhead.axis_minimum.z}
input_max: {printer.toolhead.axis_maximum.z}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __menutree __motion __move __axis_e]
type: input
enable: { not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -50
input_max: 200
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis


[menu __menutree __motion __move __z_up]
type: command
enable: { printer.idle_timeout.state != "Printing" and "xyz" not in printer['toolhead'].homed_axes }
name: Bed Up   10mm
gcode:
    FORCE_MOVE_BED DISTANCE=-10

[menu __menutree __motion __move __z_down]
type: command
enable: { printer.idle_timeout.state != "Printing" and "xyz" not in printer['toolhead'].homed_axes }
name: Bed down 10mm
gcode:
    FORCE_MOVE_BED DISTANCE=10

[menu __menutree __motion __alignz]
type: command
name: Align Z
enable: {not printer.idle_timeout.state == "Printing"}
gcode:
    PRINT MSG="Homing..."
    G28
    PRINT MSG="Aligning Z..."
    G34
    PRINT MSG="Ready"

[menu __menutree __motion __disable]
type: command
name: Disable steppers
gcode:
    M84
    M18

### menu filament ###

[menu __menutree __filament]
type: list
name: Filament

[menu __menutree __filament __hotend0_target]
type: input
enable: {'extruder' in printer}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {% if printer.extruder.target != 0 %}{printer.extruder.target}{% else %}200{% endif %}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 10
gcode:
    PLAY_SINGLE_FEEDBACK_SOUND
    M104 T0 S{'%.0f' % menu.input}

[menu __menutree __filament __loadf]
type: command
name: Load Fil.
gcode:
    M701

[menu __menutree __filament __unloadf]
type: command
name: Unload Fil.
gcode:
    M702

[menu __menutree __filament __feed]
type: input
name: Feed: {'%.1f' % menu.input}
input: 10
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__filament__feed
    PLAY_SINGLE_FEEDBACK_SOUND
    M83
    G1 E{'%.1f' % menu.input} F100
    PLAY_DOUBLE_FEEDBACK_SOUND
    RESTORE_GCODE_STATE NAME=__filament__feed

[menu __menutree __filament __cooldown]
type: command
enable: {'extruder' in printer}
name: Cooldown
gcode:
    PLAY_SINGLE_FEEDBACK_SOUND
    M104 S0

[menu __menutree __cooling]
type: list
name: Cooling

[menu __menutree __cooling __layerfan]
type: input
enable: {'fan' in printer}
name: Layer fan  {'%3d' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.05
gcode:
    M106 S{'%d' % (menu.input*255)}

[menu __menutree __cooling __aux]
type: input
enable: {'fan_generic aux_fan' in printer}
name: AUX fan    {'%3d' % (menu.input*100)}%
input: {printer['fan_generic aux_fan'].speed}
input_min: 0.49
input_max: 1
input_step: 0.05
gcode:
    SET_FAN_SPEED FAN=aux_fan SPEED={menu.input}

[menu __menutree __cooling __bedfan]
type: input
enable: {'fan_generic bed_fan' in printer}
name: Bed fan    {'%3d' % (menu.input*100)}%
input: {printer['fan_generic bed_fan'].speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode:
    SET_FAN_SPEED FAN=bed_fan SPEED={menu.input}

[menu __menutree __cooling __filterfan]
type: input
enable: {'fan_generic filter_fan' in printer}
name: Filter fan {'%3d' % (menu.input*100)}%
input: {printer['fan_generic filter_fan'].speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode:
    SET_FAN_SPEED FAN=filter_fan SPEED={menu.input}



### menu temperature ###
[menu __menutree __temp]
type: list
name: Temperature

[menu __menutree __temp __cooldown]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Cooldown
gcode:
    PLAY_SINGLE_FEEDBACK_SOUND
    M104 S0
    M140 S0


[menu __menutree __temp __hotend0_target]
type: input
enable: {'extruder' in printer}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 5
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __menutree __temp __hotend1_target]
type: input
enable: {'extruder1' in printer}
name: {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input: {printer.extruder1.target}
input_min: 0
input_max: {printer.configfile.config.extruder1.max_temp}
input_step: 5
gcode: M104 T1 S{'%.0f' % menu.input}

[menu __menutree __temp __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode: M140 S{'%.0f' % menu.input}

[menu __menutree __temp __heat_soak]
type: command
enable: {'gcode_macro HEAT_SOAK' in printer}
name: Heat soak { '%3d' %  (printer["gcode_macro HEAT_SOAK"].remain_time) }m
gcode:
    {% if printer["gcode_macro HEAT_SOAK"].remain_time != 0 %}
        PLAY_SINGLE_FEEDBACK_SOUND
        HEAT_SOAK ACTION=STOP
    {% else %}
        PLAY_DOUBLE_FEEDBACK_SOUND
        HEAT_SOAK ACTION=START DURATION=60
        { menu.exit(True) }
    {% endif %}


### menu setup ###
[menu __menutree __setup]
type: list
enable: True
name: Setup

[menu __menutree __setup __bed_mesh]
type: command
name: Update bed mesh
enable: {not printer.idle_timeout.state == "Printing"}
gcode:
    { menu.exit(True) }
    PRINT MSG="Homing..."
    G28
    PRINT MSG="Aligning Z..."
    G34
    PRINT MSG="Probing..."
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    PRINT MSG="Ready"


[menu __menutree __setup __probe_calib]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Probe offset

[menu __menutree __setup __probe_calib __start]
type: command
name: Start calibr.
gcode:
    G28
    PROBE_CALIBRATE

[menu __menutree __setup __probe_calib __adjust]
type: list
name: Adjust Z

[menu __menutree __setup __probe_calib __adjust __p1000]
type: command
name: +1.0
gcode: TESTZ Z=+1

[menu __menutree __setup __probe_calib __adjust __p100]
type: command
name: +0.1
gcode: TESTZ Z=+0.1

[menu __menutree __setup __probe_calib __adjust __p50]
type: command
name: +0.05
gcode: TESTZ Z=+0.05

[menu __menutree __setup __probe_calib __adjust __m1000]
type: command
name: -1.0
gcode: TESTZ Z=-1

[menu __menutree __setup __probe_calib __adjust __m100]
type: command
name: -0.1
gcode: TESTZ Z=-0.1

[menu __menutree __setup __probe_calib __adjust __50]
type: command
name: -0.05
gcode: TESTZ Z=-0.05


[menu __menutree __setup __probe_calib __accept]
type: command
name: Accept
gcode:
    PLAY_SINGLE_FEEDBACK_SOUND
    ACCEPT
    PRINT MSG="Ready"

[menu __menutree __setup __probe_calib __abort]
type: command
name: Abort
gcode:
    PLAY_SINGLE_FEEDBACK_SOUND
    ABORT
    PRINT MSG="Ready"

[menu __menutree __setup __probe_calib __save]
type: command
name: Save
gcode:
    PLAY_SINGLE_FEEDBACK_SOUND
    G90 ; Relative Positioning
    G0 Z10 F3000 ; lift Z
    PRINT MSG="Saving..."
    SAVE_CONFIG

[menu __menutree __setup __probe]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Probe acc. test
gcode:
    { menu.exit(True) }
    PRINT MSG="Homing..."
    G28
    PRINT MSG="Probing..."
    PROBE_ACCURACY
    PRINT MSG="Ready"

[menu __menutree __setup __tunning]
type: list
name: PID tunning

[menu __menutree __setup __tunning __hotend_pid_tunning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name: Tune Hotend PID
gcode:
    PLAY_SINGLE_FEEDBACK_SOUND
    { menu.exit(True) }
    PRINT MSG="Tunning pid..."
    PID_CALIBRATE HEATER=extruder TARGET=250 WRITE_FILE=1
    PLAY_DOUBLE_FEEDBACK_SOUND
    PRINT MSG="Ready"

[menu __menutree __setup __tunning __hotbed_pid_tunning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name: Tune Hotbed PID
gcode:
    PLAY_SINGLE_FEEDBACK_SOUND
    { menu.exit(True) }
    PRINT MSG="Tunning pid..."
    PID_CALIBRATE HEATER=heater_bed TARGET=100 WRITE_FILE=1
    PLAY_DOUBLE_FEEDBACK_SOUND
    PRINT MSG="Ready"

[menu __menutree __setup __tunning __save_pid]
type: command
enable : {not printer.idle_timeout.state == "Printing"}
name: Save Pid value
gcode:
    PLAY_SINGLE_FEEDBACK_SOUND
    { menu.exit(True) }
    PRINT MSG="Saving..."
    SAVE_CONFIG


[menu __menutree __setup __save_pending]
type: command
enable : True
name: Save later
gcode:
    PLAY_SINGLE_FEEDBACK_SOUND
    ENABLE_SAVE_PENDING
    { menu.exit(True) }
    PRINT MSG="Setting will be saved after the print complete." OUTPUT_TARGET=1

[menu __menutree __setup __save_config_restart]
type: command
enable : {not printer.idle_timeout.state == "Printing"}
name: Save & restart
gcode:
    PLAY_SINGLE_FEEDBACK_SOUND
    { menu.exit(True) }
    PRINT MSG="Saving..."
    SAVE_CONFIG

[menu __menutree __setup __restart]
type: list
name: Restart

[menu __menutree __setup __restart __host_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart host
gcode:
    PLAY_SINGLE_FEEDBACK_SOUND
    RESTART

[menu __menutree __setup __restart __firmware_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart FW
gcode:
    PLAY_SINGLE_FEEDBACK_SOUND
    FIRMWARE_RESTART


[menu __menutree __system]
type: list
enable: True
name : System

[menu __menutree __system __reboot_rpi]
type: command
name: Reboot
gcode:
    REBOOT_RPI

[menu __menutree __system __shutdown_rpi]
type: command
name: Shutdown
gcode:
    SHUTDOWN_RPI

[menu __menutree __debug]
type: list
enable: True
name : Debug

[menu __menutree __debug __dump]
type: command
name: Dump parameters
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s"
                               % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}
